["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$react-med.util","~:imports",null,"~:requires",["^ ","~$re-frame","~$re-frame.core","^:","^:","~$reagent","~$reagent.core","^<","^<","~$spec","~$cljs.spec.alpha","^>","^>","~$clojure.spec.alpha","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$round-to-precision",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","~:line",45,"~:column",7,"~:end-line",45,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^L",[["~$n","~$&",["~$precision"]]]]]],"~:doc","it takes an argument for which number to round,\n  the same as the classic round had the implicit\n  argument of 1 (e.g. (round 2.3) is the same as\n  (round-to-precision 2.3 1)","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^L",["~$n",["^N"]]]],"^K",["^L",[["~$n","~$&",["^N"]]]],"~:arglists-meta",["^L",[null]]]],"^5","~$react-med.util/round-to-precision","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",25,"^P",["^ ","^Q",true,"^R",1,"^S",1,"^T",[["^L",["~$n",["^N"]]]],"^K",["^L",[["~$n","~$&",["^N"]]]],"^U",["^L",[null]]],"^T",[["^L",["~$n",["^N"]]]],"~:protocol-impl",null,"^R",1,"^U",["^L",[null]],"^H",1,"^Q",true,"~:methods",[["^ ","^R",1,"^Q",true,"~:tag","~$number"]],"^G",45,"~:ret-tag","~$any","^I",45,"^S",1,"~:fn-var",true,"^K",["^L",[["~$n","~$&",["^N"]]]],"^O","it takes an argument for which number to round,\n  the same as the classic round had the implicit\n  argument of 1 (e.g. (round 2.3) is the same as\n  (round-to-precision 2.3 1)"],"~$primary-color",["^ ","^5","~$react-med.util/primary-color","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",12,"^H",1,"^I",12,"^J",19,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",12,"^H",6,"^I",12,"^J",19],"^Y","~$string"],"~$pre-state?",["^ ","^5","~$react-med.util/pre-state?","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",42,"^H",1,"^I",42,"^J",16,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",42,"^H",6,"^I",42,"^J",16],"^Y","~$function"],"~$<sub",["^ ","^5","~$react-med.util/<sub","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",9,"^H",1,"^I",9,"^J",10,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",9,"^H",6,"^I",9,"^J",10],"^Y","^17"],"~$validate",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",24,"^H",7,"^I",24,"^J",15,"^K",["^L",["^M",["^L",[["^=","~$input","~$message"]]]]]],"^5","~$react-med.util/validate","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",15,"^T",["^L",[["^=","^1;","^1<"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",24,"^[","~$boolean","^I",24,"^S",3,"^11",true,"^K",["^L",["^M",["^L",[["^=","^1;","^1<"]]]]]],"~$post-state?",["^ ","^5","~$react-med.util/post-state?","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",43,"^H",1,"^I",43,"^J",17,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",43,"^H",6,"^I",43,"^J",17],"^Y","^17"],"~$>evt",["^ ","^5","~$react-med.util/>evt","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",10,"^H",1,"^I",10,"^J",10,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",10,"^H",6,"^I",10,"^J",10]],"~$get-pred",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",104,"^H",7,"^I",104,"^J",15,"^K",["^L",["^M",["^L",[["~$f","~$coll"]]]]],"^O","Returns the first element of coll that satisfy the predicate f."],"^5","~$react-med.util/get-pred","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",15,"^T",["^L",[["~$f","^1D"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",104,"^[",["^4",["^10","~$clj-nil"]],"^I",104,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["~$f","^1D"]]]]],"^O","Returns the first element of coll that satisfy the predicate f."],"~$yyyy-mm-dd->dd-mm-yyyy",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",109,"^H",7,"^I",109,"^J",29,"^K",["^L",["^M",["^L",[["~$date"]]]]]],"^5","~$react-med.util/yyyy-mm-dd->dd-mm-yyyy","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",29,"^T",["^L",[["^1H"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",109,"^[","^14","^I",109,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[["^1H"]]]]]],"~$is-state?",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",36,"^H",7,"^I",36,"^J",16,"^K",["^L",["^M",["^L",[["^1<"]]]]]],"^5","~$react-med.util/is-state?","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",16,"^T",["^L",[["^1<"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",36,"^[","^17","^I",36,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[["^1<"]]]]]],"~$replace-if-none",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",85,"^H",7,"^I",85,"^J",22,"^K",["^L",["^M",["^L",[["~$attrs","~$children"]]]]],"^O","To be used with replace-if-some. The thing is that if attrs is not a map, it\n  is actually the first child."],"^5","~$react-med.util/replace-if-none","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",22,"^T",["^L",[["^1M","^1N"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",85,"^[",["^4",[null,"~$clj"]],"^I",85,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^1M","^1N"]]]]],"^O","To be used with replace-if-some. The thing is that if attrs is not a map, it\n  is actually the first child."],"~$secondary-color",["^ ","^5","~$react-med.util/secondary-color","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",13,"^H",1,"^I",13,"^J",21,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",13,"^H",6,"^I",13,"^J",21],"^Y","^14"],"~$with-mount-fn",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",15,"^H",7,"^I",15,"^J",20,"^K",["^L",["^M",["^L",[[["~$n",["^ ","~:keys",["~$component-did-mount"]],"~:as","~$to-render"]]]]]],"^O","Wrap component in the create-class fn so the react component-did-mount\n  hook can be used."],"^5","~$react-med.util/with-mount-fn","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",20,"^T",["^L",[["~$p__15725"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",15,"^[","^17","^I",15,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[[["~$n",["^ ","^1T",["^1U"]],"^1V","^1W"]]]]]],"^O","Wrap component in the create-class fn so the react component-did-mount\n  hook can be used."],"~$repeat-as",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",54,"^H",7,"^I",54,"^J",16,"^K",["^L",["^M",["^L",[["~$n","~$element"]]]]],"^O","Repeat element as the length of n. Not lazy. Good to use in maps with\n  multiple collections but when they have different length."],"^5","~$react-med.util/repeat-as","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",16,"^T",["^L",[["~$n","^1["]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",54,"^[",["^4",["^1P","~$cljs.core/IVector","^10","~$cljs.core/MetaFn","^1F"]],"^I",54,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["~$n","^1["]]]]],"^O","Repeat element as the length of n. Not lazy. Good to use in maps with\n  multiple collections but when they have different length."],"~$side-effect-component",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",93,"^H",7,"^I",93,"^J",28,"^K",["^L",["^M",["^L",[[["^ ","^1T",["~$side-effect","~$subscription"]]]]]]],"^O","A component that executes a side effect depending on the change of a subscrip-\n  tion."],"^5","~$react-med.util/side-effect-component","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",28,"^T",["^L",[["~$p__15742"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",93,"^[","^21","^I",93,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[[["^ ","^1T",["^24","^25"]]]]]]],"^O","A component that executes a side effect depending on the change of a subscrip-\n  tion."],"~$replace-if-some",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^G",60,"^H",7,"^I",60,"^J",22,"^K",["^L",["^M",["^L",[["^1M","^1["]]]]],"^O","The goal here is to make possible for components to receive optional attribu-\n  tes as style that will overwrite what's defined in the component. So I used to\n  define components like this:\n\n(defn some-component [& children]\n  [:div\n   {:style #js {:padding 12}}\n   (map-indexed #(with-meta %2 {:key %1}) children)])\n\n  But it doesn't receive optional attributes that would overwrite that style.\n  There are some options to solve the problem, including using macros, but with\n  the functions replace-if-some and replace-if-none I can write the same compo-\n  nent without changing the syntax very much, like this:\n\n(defn some-component [attrs & children]\n  (replace-if-some\n    attrs\n    [:div\n     {:style #js {:padding 12}}\n     (map-indexed #(with-meta %2 {:key %1}) (replace-if-none attrs children))]))"],"^5","~$react-med.util/replace-if-some","^F","/home/smokeonline/projects/gobbo-react-med/src/react_med/util.cljs","^J",22,"^T",["^L",[["^1M","^1["]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",60,"^[",["^4",[null,"^1P","^10"]],"^I",60,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^1M","^1["]]]]],"^O","The goal here is to make possible for components to receive optional attribu-\n  tes as style that will overwrite what's defined in the component. So I used to\n  define components like this:\n\n(defn some-component [& children]\n  [:div\n   {:style #js {:padding 12}}\n   (map-indexed #(with-meta %2 {:key %1}) children)])\n\n  But it doesn't receive optional attributes that would overwrite that style.\n  There are some options to solve the problem, including using macros, but with\n  the functions replace-if-some and replace-if-none I can write the same compo-\n  nent without changing the syntax very much, like this:\n\n(defn some-component [attrs & children]\n  (replace-if-some\n    attrs\n    [:div\n     {:style #js {:padding 12}}\n     (map-indexed #(with-meta %2 {:key %1}) (replace-if-none attrs children))]))"]],"~:cljs.spec/registry-ref",[["~:react-med.util/valid-app-state",["^L",["~$cljs.spec.alpha/keys","~:req-un",["~:react-med.util/ui","~:react-med.util/domain"]]]],["^2>","~$cljs.core/map?"],["^2?","^2@"]],"~:require-macros",["^ ","^;","^<","^<","^<","^=","^>","^>","^>","^?","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^2=","~:opt-un","^2>","~:gfn","~:pred-exprs","~:keys-pred","~:opt-keys","~:req-specs","~:component-did-mount","^2?","~$cljs.core/contains?","^2@","~$%","^2<","~:req","~:reagent-render","~:ui","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pred-forms","~:spec-data","~:div.no-ui.only-for-side-effect","~:domain","~:side-effect","~:spec-input","^2;","~:subscription","~:opt"]],"~:order",["^2J","^2M","^2W","^2S","^2;","^2<","^2=","^2>","^2?","^2D","^2E","^2F","^2G","^2H","^2I","^2L","^2O","^2Q","^2R","^2Y","^2N","^2U","^2P","~$%","^2@","^2K","^2V","^2X","^2T"]],"^O",null]