["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$react-med.util","~:imports",null,"~:requires",["^ ","~$re-frame","~$re-frame.core","^:","^:","~$reagent","~$reagent.core","^<","^<","~$spec","~$cljs.spec.alpha","^>","^>","~$clojure.spec.alpha","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$round-to-precision",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","~:line",48,"~:column",7,"~:end-line",48,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^L",[["~$n","~$&",["~$precision"]]]]]],"~:doc","it takes an argument for which number to round,\n  the same as the classic round had the implicit\n  argument of 1 (e.g. (round 2.3) is the same as\n  (round-to-precision 2.3 1)","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^L",["~$n",["^N"]]]],"^K",["^L",[["~$n","~$&",["^N"]]]],"~:arglists-meta",["^L",[null]]]],"^5","~$react-med.util/round-to-precision","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",25,"^P",["^ ","^Q",true,"^R",1,"^S",1,"^T",[["^L",["~$n",["^N"]]]],"^K",["^L",[["~$n","~$&",["^N"]]]],"^U",["^L",[null]]],"^T",[["^L",["~$n",["^N"]]]],"~:protocol-impl",null,"^R",1,"^U",["^L",[null]],"^H",1,"^Q",true,"~:methods",[["^ ","^R",1,"^Q",true,"~:tag","~$number"]],"^G",48,"~:ret-tag","~$any","^I",48,"^S",1,"~:fn-var",true,"^K",["^L",[["~$n","~$&",["^N"]]]],"^O","it takes an argument for which number to round,\n  the same as the classic round had the implicit\n  argument of 1 (e.g. (round 2.3) is the same as\n  (round-to-precision 2.3 1)"],"~$primary-color",["^ ","^5","~$react-med.util/primary-color","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",12,"^H",1,"^I",12,"^J",19,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",12,"^H",6,"^I",12,"^J",19],"^Y","~$string"],"~$pre-state?",["^ ","^5","~$react-med.util/pre-state?","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",45,"^H",1,"^I",45,"^J",16,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",45,"^H",6,"^I",45,"^J",16],"^Y","~$function"],"~$<sub",["^ ","^5","~$react-med.util/<sub","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",9,"^H",1,"^I",9,"^J",10,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",9,"^H",6,"^I",9,"^J",10],"^Y","^17"],"~$valid?",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",24,"^H",7,"^I",24,"^J",13,"^K",["^L",["^M",["^L",[["^=","~$input"]]]]]],"^5","~$react-med.util/valid?","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",13,"^T",["^L",[["^=","^1;"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",24,"^[","~$boolean","^I",24,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^=","^1;"]]]]]],"~$validate",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",27,"^H",7,"^I",27,"^J",15,"^K",["^L",["^M",["^L",[["^=","^1;","~$message"]]]]]],"^5","~$react-med.util/validate","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",15,"^T",["^L",[["^=","^1;","^1?"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",27,"^[","^1=","^I",27,"^S",3,"^11",true,"^K",["^L",["^M",["^L",[["^=","^1;","^1?"]]]]]],"~$years-difference",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",116,"^H",7,"^I",116,"^J",23,"^K",["^L",["^M",["^L",[["~$initial-date","~$final-date"]]]]],"^O","Age calculator. Inputs should be in the format yyyy-mm-dd."],"^5","~$react-med.util/years-difference","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",23,"^T",["^L",[["^1B","^1C"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",116,"^[","~$js/Number","^I",116,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^1B","^1C"]]]]],"^O","Age calculator. Inputs should be in the format yyyy-mm-dd."],"~$post-state?",["^ ","^5","~$react-med.util/post-state?","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",46,"^H",1,"^I",46,"^J",17,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",46,"^H",6,"^I",46,"^J",17],"^Y","^17"],"~$>evt",["^ ","^5","~$react-med.util/>evt","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",10,"^H",1,"^I",10,"^J",10,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",10,"^H",6,"^I",10,"^J",10]],"~$get-pred",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",107,"^H",7,"^I",107,"^J",15,"^K",["^L",["^M",["^L",[["~$f","~$coll"]]]]],"^O","Returns the first element of coll that satisfy the predicate f."],"^5","~$react-med.util/get-pred","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",15,"^T",["^L",[["~$f","^1K"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",107,"^[",["^4",["^10","~$clj-nil"]],"^I",107,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["~$f","^1K"]]]]],"^O","Returns the first element of coll that satisfy the predicate f."],"~$yyyy-mm-dd->dd-mm-yyyy",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",112,"^H",7,"^I",112,"^J",29,"^K",["^L",["^M",["^L",[["~$date"]]]]]],"^5","~$react-med.util/yyyy-mm-dd->dd-mm-yyyy","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",29,"^T",["^L",[["^1O"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",112,"^[","^14","^I",112,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[["^1O"]]]]]],"~$is-state?",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",39,"^H",7,"^I",39,"^J",16,"^K",["^L",["^M",["^L",[["^1?"]]]]]],"^5","~$react-med.util/is-state?","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",16,"^T",["^L",[["^1?"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",39,"^[","^17","^I",39,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[["^1?"]]]]]],"~$replace-if-none",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",88,"^H",7,"^I",88,"^J",22,"^K",["^L",["^M",["^L",[["~$attrs","~$children"]]]]],"^O","To be used with replace-if-some. The thing is that if attrs is not a map, it\n  is actually the first child."],"^5","~$react-med.util/replace-if-none","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",22,"^T",["^L",[["^1T","^1U"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",88,"^[",["^4",[null,"~$clj"]],"^I",88,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^1T","^1U"]]]]],"^O","To be used with replace-if-some. The thing is that if attrs is not a map, it\n  is actually the first child."],"~$secondary-color",["^ ","^5","~$react-med.util/secondary-color","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",13,"^H",1,"^I",13,"^J",21,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",13,"^H",6,"^I",13,"^J",21],"^Y","^14"],"~$with-mount-fn",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",15,"^H",7,"^I",15,"^J",20,"^K",["^L",["^M",["^L",[[["~$n",["^ ","~:keys",["~$component-did-mount"]],"~:as","~$to-render"]]]]]],"^O","Wrap component in the create-class fn so the react component-did-mount\n  hook can be used."],"^5","~$react-med.util/with-mount-fn","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",20,"^T",["^L",[["~$p__15725"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",15,"^[","^17","^I",15,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[[["~$n",["^ ","^1[",["^20"]],"^21","^22"]]]]]],"^O","Wrap component in the create-class fn so the react component-did-mount\n  hook can be used."],"~$repeat-as",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",57,"^H",7,"^I",57,"^J",16,"^K",["^L",["^M",["^L",[["~$n","~$element"]]]]],"^O","Repeat element as the length of n. Not lazy. Good to use in maps with\n  multiple collections but when they have different length."],"^5","~$react-med.util/repeat-as","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",16,"^T",["^L",[["~$n","^26"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",57,"^[",["^4",["^1W","~$cljs.core/IVector","^10","~$cljs.core/MetaFn","^1M"]],"^I",57,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["~$n","^26"]]]]],"^O","Repeat element as the length of n. Not lazy. Good to use in maps with\n  multiple collections but when they have different length."],"~$side-effect-component",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",96,"^H",7,"^I",96,"^J",28,"^K",["^L",["^M",["^L",[[["^ ","^1[",["~$side-effect","~$subscription"]]]]]]],"^O","A component that executes a side effect depending on the change of a subscrip-\n  tion."],"^5","~$react-med.util/side-effect-component","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",28,"^T",["^L",[["~$p__15742"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",96,"^[","^28","^I",96,"^S",1,"^11",true,"^K",["^L",["^M",["^L",[[["^ ","^1[",["^2;","^2<"]]]]]]],"^O","A component that executes a side effect depending on the change of a subscrip-\n  tion."],"~$replace-if-some",["^ ","^D",null,"^E",["^ ","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^G",63,"^H",7,"^I",63,"^J",22,"^K",["^L",["^M",["^L",[["^1T","^26"]]]]],"^O","The goal here is to make possible for components to receive optional attribu-\n  tes as style that will overwrite what's defined in the component. So I used to\n  define components like this:\n\n(defn some-component [& children]\n  [:div\n   {:style #js {:padding 12}}\n   (map-indexed #(with-meta %2 {:key %1}) children)])\n\n  But it doesn't receive optional attributes that would overwrite that style.\n  There are some options to solve the problem, including using macros, but with\n  the functions replace-if-some and replace-if-none I can write the same compo-\n  nent without changing the syntax very much, like this:\n\n(defn some-component [attrs & children]\n  (replace-if-some\n    attrs\n    [:div\n     {:style #js {:padding 12}}\n     (map-indexed #(with-meta %2 {:key %1}) (replace-if-none attrs children))]))"],"^5","~$react-med.util/replace-if-some","^F","/home/smokeonline/projects/Gobbo/react-med-/src/react_med/util.cljs","^J",22,"^T",["^L",[["^1T","^26"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^Q",false,"^G",63,"^[",["^4",[null,"^1W","^10"]],"^I",63,"^S",2,"^11",true,"^K",["^L",["^M",["^L",[["^1T","^26"]]]]],"^O","The goal here is to make possible for components to receive optional attribu-\n  tes as style that will overwrite what's defined in the component. So I used to\n  define components like this:\n\n(defn some-component [& children]\n  [:div\n   {:style #js {:padding 12}}\n   (map-indexed #(with-meta %2 {:key %1}) children)])\n\n  But it doesn't receive optional attributes that would overwrite that style.\n  There are some options to solve the problem, including using macros, but with\n  the functions replace-if-some and replace-if-none I can write the same compo-\n  nent without changing the syntax very much, like this:\n\n(defn some-component [attrs & children]\n  (replace-if-some\n    attrs\n    [:div\n     {:style #js {:padding 12}}\n     (map-indexed #(with-meta %2 {:key %1}) (replace-if-none attrs children))]))"]],"~:cljs.spec/registry-ref",[["~:react-med.util/valid-app-state",["^L",["~$cljs.spec.alpha/keys","~:req-un",["~:react-med.util/ui","~:react-med.util/domain"]]]],["^2E","~$cljs.core/map?"],["^2F","^2G"]],"~:require-macros",["^ ","^;","^<","^<","^<","^=","^>","^>","^>","^?","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^2D","~:opt-un","^2E","~:gfn","~:pred-exprs","~:keys-pred","~:opt-keys","~:req-specs","~:component-did-mount","^2F","~$cljs.core/contains?","^2G","~$%","^2C","~:req","~:reagent-render","~:ui","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pred-forms","~:spec-data","~:div.no-ui.only-for-side-effect","~:domain","~:side-effect","~:spec-input","^2B","~:subscription","~:opt"]],"~:order",["^2Q","^2T","^32","^2Z","^2B","^2C","^2D","^2E","^2F","^2K","^2L","^2M","^2N","^2O","^2P","^2S","^2V","^2X","^2Y","^34","^2U","^30","^2W","~$%","^2G","^2R","^31","^33","^2["]],"^O",null]