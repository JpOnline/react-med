["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$empty-queue","~$re-frame.interop","~$debug-enabled?","^6"],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","^4","^4","^6","^6","~$trace","~$re-frame.trace","^?","^?","~$set","~$clojure.set","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","^5","^6","^7","^6"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","~:line",43,"~:column",7,"~:end-line",43,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^N",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^N",["^P","^Q","~$f","^R"]]],"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]],"~:arglists-meta",["^N",[null]]]],"^:","~$re-frame.interceptor/update-effect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",20,"^S",["^ ","^T",true,"^U",3,"^V",3,"^W",[["^N",["^P","^Q","~$f","^R"]]],"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]],"^X",["^N",[null]]],"^W",[["^N",["^P","^Q","~$f","^R"]]],"~:protocol-impl",null,"^U",3,"^X",["^N",[null]],"^J",1,"^T",true,"~:methods",[["^ ","^U",3,"^T",true,"~:tag","~$any"]],"^I",43,"~:ret-tag","^11","^K",43,"^V",3,"~:fn-var",true,"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]]],"~$invoke-interceptors",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",75,"^J",8,"^K",75,"^L",27,"~:private",true,"^M",["^N",["^O",["^N",[["^P","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^15",true,"^:","~$re-frame.interceptor/invoke-interceptors","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",27,"^W",["^N",[["^P","^16"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",75,"^K",75,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^P","^16"]]]]],"^17","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",57,"^J",7,"^K",57,"^L",21,"^M",["^N",["^O",["^N",[["^P","^Q","~$value"]]]]]],"^:","~$re-frame.interceptor/assoc-coeffect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",21,"^W",["^N",[["^P","^Q","^1:"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",57,"^12",["^9",["~$clj","^11"]],"^K",57,"^V",3,"^13",true,"^M",["^N",["^O",["^N",[["^P","^Q","^1:"]]]]]],"~$update-coeffect",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",61,"^J",7,"^K",61,"^L",22,"^M",["^N",["^O",["^N",[["^P","^Q","~$f","~$&","^R"]]]]],"^S",["^ ","^T",true,"^U",3,"^V",3,"^W",[["^N",["^P","^Q","~$f","^R"]]],"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]],"^X",["^N",[null]]]],"^:","~$re-frame.interceptor/update-coeffect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",22,"^S",["^ ","^T",true,"^U",3,"^V",3,"^W",[["^N",["^P","^Q","~$f","^R"]]],"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]],"^X",["^N",[null]]],"^W",[["^N",["^P","^Q","~$f","^R"]]],"^Z",null,"^U",3,"^X",["^N",[null]],"^J",1,"^T",true,"^[",[["^ ","^U",3,"^T",true,"^10","^11"]],"^I",61,"^12","^11","^K",61,"^V",3,"^13",true,"^M",["^N",[["^P","^Q","~$f","~$&","^R"]]]],"~$invoke-interceptor-fn",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",68,"^J",8,"^K",68,"^L",29,"^15",true,"^M",["^N",["^O",["^N",[["^P","~$interceptor","^16"]]]]]],"^15",true,"^:","~$re-frame.interceptor/invoke-interceptor-fn","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",29,"^W",["^N",[["^P","^1@","^16"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",68,"^12",["^9",[null,"^11"]],"^K",68,"^V",3,"^13",true,"^M",["^N",["^O",["^N",[["^P","^1@","^16"]]]]]],"~$get-effect",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",31,"^J",7,"^K",31,"^L",17,"^M",["^N",["^O",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$not-found"]]]]],"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^X",["^N",[null,null,null]]]],"^:","~$re-frame.interceptor/get-effect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",17,"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^X",["^N",[null,null,null]]],"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^Z",null,"^U",3,"^X",["^N",[null,null,null]],"^J",1,"^T",false,"^[",[["^ ","^U",1,"^T",false,"^10","^11"],["^ ","^U",2,"^T",false,"^10",["^9",[null,"^11"]]],["^ ","^U",3,"^T",false,"^10","^11"]],"^I",31,"^K",31,"^V",3,"^13",true,"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]]],"~$->interceptor",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",17,"^J",7,"^K",17,"^L",20,"^M",["^N",["^O",["^N",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^17","Create an interceptor from named arguments","^S",["^ ","^T",true,"^U",0,"^V",0,"^W",[["^N",[["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^M",["^N",[["~$&",["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^X",["^N",[null]]]],"^:","~$re-frame.interceptor/->interceptor","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",20,"^S",["^ ","^T",true,"^U",0,"^V",0,"^W",[["^N",[["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^M",["^N",[["~$&",["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^X",["^N",[null]]],"^W",[["^N",[["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^Z",null,"^U",0,"^X",["^N",[null]],"^J",1,"^T",true,"^[",[["^ ","^U",0,"^T",true,"^10","~$cljs.core/IMap"]],"^I",17,"^12","^11","^K",17,"^V",0,"^13",true,"^M",["^N",[["~$&",["^ ","^1F","~$m","^1G",["^1H","^1I","^1J"]]]]],"^17","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",49,"^J",7,"^K",49,"^L",19,"^M",["^N",["^O",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]]]],"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^X",["^N",[null,null,null]]]],"^:","~$re-frame.interceptor/get-coeffect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",19,"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^X",["^N",[null,null,null]]],"^W",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]],"^Z",null,"^U",3,"^X",["^N",[null,null,null]],"^J",1,"^T",false,"^[",[["^ ","^U",1,"^T",false,"^10","^11"],["^ ","^U",2,"^T",false,"^10",["^9",[null,"^11"]]],["^ ","^U",3,"^T",false,"^10","^11"]],"^I",49,"^K",49,"^V",3,"^13",true,"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","^1C"]]]],"~$execute",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",149,"^J",7,"^K",149,"^L",14,"^M",["^N",["^O",["^N",[["~$event-v","~$interceptors"]]]]],"^17","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^:","~$re-frame.interceptor/execute","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",14,"^W",["^N",[["^1P","^1Q"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",149,"^12","^11","^K",149,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^1P","^1Q"]]]]],"^17","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",39,"^J",7,"^K",39,"^L",19,"^M",["^N",["^O",["^N",[["^P","^Q","^1:"]]]]]],"^:","~$re-frame.interceptor/assoc-effect","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",19,"^W",["^N",[["^P","^Q","^1:"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",39,"^12",["^9",["^1<","^11"]],"^K",39,"^V",3,"^13",true,"^M",["^N",["^O",["^N",[["^P","^Q","^1:"]]]]]],"~$enqueue",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",112,"^J",7,"^K",112,"^L",14,"^M",["^N",["^O",["^N",[["^P","^1Q"]]]]],"^17","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^:","~$re-frame.interceptor/enqueue","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",14,"^W",["^N",[["^P","^1Q"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",112,"^12",["^9",["^1<","^11"]],"^K",112,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^P","^1Q"]]]]],"^17","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^:","~$re-frame.interceptor/mandatory-interceptor-keys","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",9,"^J",1,"^K",9,"^L",32,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",9,"^J",6,"^K",9,"^L",32],"^10","~$cljs.core/ISet"],"~$interceptor?",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",11,"^J",7,"^K",11,"^L",19,"^M",["^N",["^O",["^N",[["~$m"]]]]]],"^:","~$re-frame.interceptor/interceptor?","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",19,"^W",["^N",[["~$m"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",11,"^12","~$boolean","^K",11,"^V",1,"^13",true,"^M",["^N",["^O",["^N",[["~$m"]]]]]],"~$change-direction",["^ ","^F",null,"^G",["^ ","^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^I",135,"^J",8,"^K",135,"^L",24,"^15",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^17","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^15",true,"^:","~$re-frame.interceptor/change-direction","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",24,"^W",["^N",[["^P"]]],"^Z",null,"^X",["^N",[null,null]],"^J",1,"^T",false,"^I",135,"^12",["^9",["^1<","^11"]],"^K",135,"^V",1,"^13",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^17","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^P",["^ ","^F",null,"^G",["^ ","^15",true,"^H","/home/smokeonline/projects/gobbo-react-med/target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",15,"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["~$event","^1Q"],["^23","^1Q","~$db"]]],"^M",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]],"^X",["^N",[null,null]]],"^J",8,"^I",124,"^K",124,"^M",["^N",["^O",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]]]],"^17","Create a fresh context"],"^15",true,"^:","~$re-frame.interceptor/context","^H","target/public/cljs-out/prod/re_frame/interceptor.cljc","^L",15,"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]],"^M",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]],"^X",["^N",[null,null]]],"^W",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]],"^Z",null,"^U",3,"^X",["^N",[null,null]],"^J",1,"^T",false,"^[",[["^ ","^U",2,"^T",false,"^10",["^9",["^1<","^11"]]],["^ ","^U",3,"^T",false,"^10",["^9",["^1<","^11"]]]],"^I",124,"^K",124,"^V",3,"^13",true,"^M",["^N",[["^23","^1Q"],["^23","^1Q","^24"]]],"^17","Create a fresh context"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^>","^?","^?","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^2?","^2@","^2F","^2C","^2:","^2A","^2D","^2=","^2B","^2>","^2<","^2;","^2E"]],"^17",null]